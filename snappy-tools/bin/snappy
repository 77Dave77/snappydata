#!/bin/bash

# Resolve the path including symlinks
# Use the most generic approach using "ls -l" instead of readlink etc.
# that are not available on all platforms.
fp="$0"
unalias ls 2>/dev/null
unalias cut 2>/dev/null
while [ -L "$fp" ]; do
  fp="`ls -l "$fp" | cut -d'>' -f 2`"
  # trim leading/trailing spaces
  fp="`echo $fp`"
done

# Set SNAPPY to the product toplevel directory
SNAPPY="`dirname "$fp"`"
if [ -z "$SNAPPY" ]; then
  SNAPPY=.
fi
OLDPWD="$PWD"
cd "$SNAPPY"
SNAPPY="`dirname "$PWD"`"
cd "$OLDPWD"

# TODO Write equivalent .bat script for Windows
if [ "x$WINDIR" != "x" ]; then
  echo "ERROR: The variable WINDIR is set indicating this script is running in a Windows OS, please use the .bat file version instead."
  exit 1
fi

SNAPPY_TOOLS_JAR="$SNAPPY"/lib/snappy-spark-assembly___VERSION__.jar

if [ ! -f "$SNAPPY_TOOLS_JAR" ]; then
  echo "ERROR: Could not determine SnappyData location."
  exit 1
fi

JLINE_JAR="$SNAPPY/../store/lib/jline-1.0.S2-B.jar"

if [ ! -f "$JLINE_JAR" ]; then
  echo "ERROR: Could not determine Snappy store location."
  exit 1
fi
   
# This JVM option will exit the VM when an OutOfMemoryError is thrown.
# This is supported in the HotSpot JVM only (for now).
if [ ! -z "`${GFXD_JAVA:-java} -version 2>&1 | grep HotSpot`" ]; then
  OUT_OF_MEMORY_OPTS="-XX:OnOutOfMemoryError='kill -9 %p'"
fi

# Configure commons-logging to redirect to JDK logging
GFXD_OPTS="-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Jdk14Logger ${GFXD_OPTS}"

JLINE_JAR="$SNAPPY/../store/lib/jline-1.0.S2-B.jar"

if [ -z "${OUT_OF_MEMORY_OPTS}" ]; then
  "${GFXD_JAVA:-java}" ${JAVA_ARGS} ${GFXD_OPTS} -classpath "${JLINE_JAR}:${SNAPPY_TOOLS_JAR}" io.snappydata.tools.SnappyUtilLauncher "$@" 

else
  "${GFXD_JAVA:-java}" ${JAVA_ARGS} "${OUT_OF_MEMORY_OPTS}" ${GFXD_OPTS} -classpath "${JLINE_JAR}:${SNAPPY_TOOLS_JAR}" io.snappydata.tools.SnappyUtilLauncher "$@"
fi
